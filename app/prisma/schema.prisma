generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/waz_ai_cofounder/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  firstName       String?
  lastName        String?
  companyName     String?
  focusArea       String?
  password        String?
  preferences     Json?
  learningData    Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  apiCallsLimit   Int              @default(10)
  apiCallsUsed    Int              @default(0)
  isAdmin         Boolean          @default(false)
  planExpires     DateTime?
  planType        PlanType         @default(FREE)
  accounts        Account[]
  conversations   Conversation[]
  projects        Project[]
  sessions        Session[]
  preferences_rel UserPreference[]
  victories       Victory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id            String           @id @default(cuid())
  name          String
  description   String?
  status        ProjectStatus    @default(ACTIVE)
  category      String?
  goals         String[]
  milestones    Json?
  metadata      Json?
  userId        String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  conversations Conversation[]
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  insights      ProjectInsight[]
  victories     Victory[]
}

model Conversation {
  id        String    @id @default(cuid())
  title     String?
  agentType AgentType
  messages  Json
  context   Json?
  summary   String?
  userId    String
  projectId String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  project   Project?  @relation(fields: [projectId], references: [id])
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgentKnowledge {
  id         String    @id @default(cuid())
  agentType  AgentType
  domain     String
  key        String
  value      Json
  confidence Float?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([agentType, domain, key])
}

model UserPreference {
  id        String   @id @default(cuid())
  userId    String
  category  String
  key       String
  value     Json
  weight    Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, key])
}

model Victory {
  id          String      @id @default(cuid())
  title       String
  description String
  type        VictoryType
  impact      String?
  metrics     Json?
  celebration Json?
  userId      String
  projectId   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  project     Project?    @relation(fields: [projectId], references: [id])
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MarketInsight {
  id         String   @id @default(cuid())
  title      String
  category   String
  content    String
  data       Json?
  confidence Float?
  source     String?
  tags       String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ProjectInsight {
  id         String      @id @default(cuid())
  projectId  String
  title      String
  content    String
  type       InsightType
  agentType  AgentType?
  data       Json?
  actionable Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model AppConcept {
  id            String        @id @default(cuid())
  name          String
  description   String
  category      String
  targetMarket  String?
  businessModel String?
  techStack     String[]
  features      Json?
  analysis      Json?
  userId        String
  status        ConceptStatus @default(IDEA)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model TradingStrategy {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String
  rules       Json
  backtest    Json?
  performance Json?
  userId      String
  active      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  PAUSED
  ARCHIVED
}

enum PlanType {
  FREE
  BASIC
  PRO
  UNLIMITED
  ADMIN
}

enum AgentType {
  TECHNICAL
  BUSINESS
  TREND
  CREATIVE
  GENERAL
}

enum VictoryType {
  MILESTONE_COMPLETED
  PROJECT_LAUNCHED
  TECHNICAL_BREAKTHROUGH
  BUSINESS_WIN
  LEARNING_ACHIEVEMENT
  COLLABORATION_SUCCESS
}

enum InsightType {
  TECHNICAL_RECOMMENDATION
  BUSINESS_OPPORTUNITY
  MARKET_TIMING
  CREATIVE_DIRECTION
  RISK_ASSESSMENT
  OPTIMIZATION_SUGGESTION
}

enum ConceptStatus {
  IDEA
  EVALUATING
  APPROVED
  IN_DEVELOPMENT
  LAUNCHED
  ARCHIVED
}
